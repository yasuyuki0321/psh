name: Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-and-upload-artifacts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            os: darwin-amd64
          - goos: darwin
            goarch: arm64
            os: darwin-arm64
          - goos: linux
            goarch: amd64
            os: linux-amd64
          - goos: linux
            goarch: arm64
            os: linux-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.20'

      - name: Compile and Tar
        run: |
          env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/psh-${{ matrix.os }} .
          tar -czvf build/psh-${{ matrix.os }}.tar.gz -C build psh-${{ matrix.os }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}.tar.gz
          path: build/psh-${{ matrix.os }}.tar.gz

  create-release:
    needs: build-and-upload-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Extract tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Check if release exists
        run: |
          if gh release view $TAG_NAME; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Handle release
        run: |
          artifacts_list=(artifacts/*.tar.gz)
          for artifact in "${artifacts_list[@]}"; do
            if [[ $RELEASE_EXISTS == "true" ]]; then
              gh release upload $TAG_NAME $artifact
            else
              gh release create $TAG_NAME $artifact
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
